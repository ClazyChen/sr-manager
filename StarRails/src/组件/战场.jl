# 核心的战场，每局游戏都依赖一个战场
include("角色.jl")
include("速度条.jl")

mutable struct 战场

    蓝方角色::Vector{角色}
    红方角色::Vector{角色}

    胜利方::标签.队伍
    蓝方战技点::进度
    红方战技点::进度
    速度条::速度条

    function 战场(蓝方角色::Vector{角色}, 红方角色::Vector{角色})
        new(蓝方角色, 红方角色, 中立,
            进度(当前 = 常数.默认初始战技点, 上限 = 常数.默认最大战技点),
            进度(当前 = 常数.默认初始战技点, 上限 = 常数.默认最大战技点),
            速度条())
    end

end

已经结束(战场::战场) = 战场.胜利方 != 中立

function 判断胜负!(战场::战场)
    if all(单位 -> 单位.存活 == false, 战场.蓝方角色)
        战场.胜利方 = 红方
    elseif all(单位 -> 单位.存活 == false, 战场.红方角色)
        战场.胜利方 = 蓝方
    end
    return 已经结束(战场)
end

include("战场队伍.jl")

function 初始化速度条!(战场::战场)
    战场.速度条.节点 = []
    for 单位 in [战场.蓝方角色..., 战场.红方角色...]
        插入单位!(战场.速度条, 单位)
    end
end

function 初始化技能!(战场::战场)
    for 单位 in [战场.蓝方角色..., 战场.红方角色...]
        初始化技能!(单位)
    end
end

function 选取合适的技能(战场::战场, 角色::角色, 技能筛选器::Function)
    当前最优的技能 = nothing
    当前最优的收益::Float64 = -Inf
    for 技能 in 角色.技能列表
        if 技能筛选器(技能) && 可以使用(技能, 空事件(战场, 角色))
            技能收益 = 技能.指定目标(战场, 技能)
            if 技能收益 > 当前最优的收益
                当前最优的技能 = 技能
                当前最优的收益 = 技能收益
            end
        end
    end
    当前最优的技能
end

function 进行回合!(战场::战场)
    进行回合的角色 = 当前角色(战场.速度条)
    if 进行回合的角色.韧性.当前 == 0
        进行回合的角色.韧性 += 进行回合的角色.韧性.上限
    end
    if 进行回合的角色.存活
        当前最优的技能 = 选取合适的技能(战场, 进行回合的角色, 技能 -> begin
            普攻 in 技能 || 战技 in 技能
        end)
        if 当前最优的技能 !== nothing
            使用技能!(战场, 当前最优的技能)
        end
    end
end

function 追加回合!(战场::战场)
    进行回合的角色 = 当前角色(战场.速度条)
    while 进行回合的角色.存活
        当前最优的技能 = 选取合适的技能(战场, 进行回合的角色, 技能 -> begin
            终结技 in 技能
        end)
        当前最优的技能 === nothing && break
        使用技能!(战场, 当前最优的技能)
    end
end

